import platform, psutil, time, argparse

def cpu_mem_info(session, delay, coretype):
  print('CPU AND RAM INFO')
  print('________________')
  print('CPU : ' + platform.processor())
  if coretype == 'physical':
    print('CPU Physical Core Count : ' + str(psutil.cpu_count(logical=False)))
  elif coretype == 'logical':
    print('CPU Logical Core Count : ' + str(psutil.cpu_count(logical=True)))
  elif coretype == 'both':
    print('CPU Physical Core Count : ' + str(psutil.cpu_count(logical=False)))
    print('CPU Logical Core Count : ' + str(psutil.cpu_count(logical=True)))
  print('CPU Frequency in Megahertz: ' + str(psutil.cpu_freq()[0]))
  print('RAM Amount : ' + str(psutil.virtual_memory()[0]) + ' bytes')
  print(' ')
  print('STATISTICS')
  print('________________')
  for sec in range(int(session/delay)):
    print('CPU Usage On All Cores : ' + str(psutil.cpu_percent(interval=1, percpu=True)))
    if platform.uname()[0] == 'Linux' or platform.uname()[0] == 'FreeBSD':
      for core in psutil.sensors_temperatures()[-1][2:]:
        print(str(core[0][7:-1]) + ' : ' + str(core[1]))
    else:
      print('No CPU Temperatures Available')
    print('RAM Usage : %' + str(psutil.virtual_memory()[2]))
    print(' ')
    time.sleep(delay)

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description = 'Command Line Interface')
  parser.add_argument('--session', default = 25,
                      help = 'How long do you want the program to run in seconds?',
                      type = int)
  parser.add_argument('--delay', default = 5,
                      help = 'How much time do you want between outputs in seconds?',
                      type = int)
  parser.add_argument('--coretype', default = 'both',
                      help = 'What type of CPU core would you like to see? type logical, physical, or both',
                      type = str)
  #parser.add_argument('--help', help="print usage")

  try:
    args = parser.parse_args()
    cpu_mem_info(args.session, args.delay, args.coretype)
  except:
    parser.print_help()
